<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:p="http://www.springframework.org/schema/p"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:mvc="http://www.springframework.org/schema/mvc"
		
		xsi:schemaLocation="
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-3.0.xsd
http://www.springframework.org/schema/mvc
http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
">
	<!-- Activates various annotations to be detected in bean classes -->
	<context:annotation-config/>
	<!-- Scans the class-path for annotated components that will be auto-registered as Spring beans.
	For example @Controller and @Service. Make sure to set the correct base-package-->
	<context:component-scan base-package="com.github.controllers,com.github.service,
	com.github.dto,com.github.dao" />

<!--
Enable annotation driven controllers, validation etc... Configures the annotation-driven Spring MVC Controller programming model.
Note that, with Spring 3.0, this tag works in SERVLET MVC only!
http://stackoverflow.com/a/14326400/5081877 - cache-period="31556926"-->
	<mvc:annotation-driven />
	<mvc:resources mapping="/js/**" location="/js/"/>
	<mvc:resources mapping="/css/**" location="/css/"/>
	<mvc:resources mapping="/angular/**" location="/angular/"/>
	<mvc:resources mapping="/images/**" location="/images/"/>
	<!-- controllers with annotations use @component in INTERCEPTOR -->
	<!-- <mvc:interceptors>
		<bean class="com.github.controllers.TimeInterceptor" />
		<mvc:interceptor>
			<mvc:mapping path="/" />
			<bean class="com.github.controllers.TimeInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors> -->
	
	<!-- Here it means that when the controller returns a value, then it resolves the view like this.
	EX: /WEB_INF/jsp/ + return value + .jsp -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" 
	p:prefix="/WEB-INF/jsp/" p:suffix=".jsp" />

	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:mail.properties</value>
			</list>
		</property>
	</bean>
	
	<!--Mail Service -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="${mail.host}"></property>
		<property name="port" value="${mail.port}"></property>
		<property name="username" value="${mail.username}"></property>
		<property name="password" value="${mail.password}"></property>
		<property name="javaMailProperties">
			<props>
				<prop key="mail.transport.protocol">${mail.transport.protocol}</prop>
				<prop key="mail.smtp.auth">${mail.smtp.auth}</prop>
				<prop key="mail.smtp.starttls.enable">${mail.smtp.starttls.enable}</prop>
				<prop key="mail.smtp.debug">${mail.debug}</prop>
				<prop key="mail.smtp.socketFactory.port">${mail.smtp.socketFactory.port}</prop>
				<prop key="mail.smtp.socketFactory.class">${mail.smtp.socketFactory.class}</prop>
				<prop key="mail.smtp.socketFactory.fallback">${mail.smtp.socketFactory.fallback}</prop>
			</props>
		</property>
	</bean>
	<bean id="velocityEngine" class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
		<property name="velocityProperties">
		<value>
		resource.loader=class
		class.resource.loader.class=org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader
		</value>
		</property>
	</bean>
</beans>